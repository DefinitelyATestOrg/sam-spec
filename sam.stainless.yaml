# yaml-language-server: $schema=https://app.stainlessapi.com/config.schema.json

organization:
  # Name of your organization or company, used to determine the name of the client
  # and headings.
  name: sam
  docs: https://docs.sam.com
  contact: apiteam@swagger.io

# `targets` define the output targets and their customization options, such as
# whether to emit the Node SDK and what it's package name should be.
targets:
  go:
    package_name: sam
    production_repo: DefinitelyATestOrg/sam-node
  terraform:
    provider_name: sam
    production_repo: DefinitelyATestOrg/terraform-provider-sam
    publish:
      hashicorp_registry: false
  python:
    package_name: sam
    production_repo: DefinitelyATestOrg/sam-python
    publish:
      pypi: false
  ruby:
    gem_name: sam
    production_repo: DefinitelyATestOrg/sam-ruby
    publish:
      rubygems: false
  java:
    reverse_domain: me.elborai.api
    production_repo: DefinitelyATestOrg/sam-java
    publish:
      maven: false
  kotlin:
    reverse_domain: me.elborai.api
    production_repo: DefinitelyATestOrg/sam-kotlin
    publish:
      maven: false
  node:
    package_name: sam
    production_repo: DefinitelyATestOrg/sam-node
    publish:
      npm: false

# `client_settings` define settings for the API client, such as extra constructor
# arguments (used for authentication), retry behavior, idempotency, etc.
client_settings:
  opts:
    api_key:
      type: string
      description: API key used for authenticating requests via the Authorization header
      nullable: false
      read_env: API_KEY
      auth:
        security_scheme: api_key
        role: value

# `environments` are a map of the name of the environment (e.g. "sandbox",
# "production") to the corresponding url to use.
environments:
  production: /api/v3

# `pagination` defines [pagination schemes] which provides a template to match
# endpoints and generate next-page and auto-pagination helpers in the SDKs.
pagination: []

# `resources` define the structure and organziation for your API, such as how
# methods and models are grouped together and accessed. See the [configuration
# guide] for more information.
#
# [configuration guide]:
#   https://app.stainlessapi.com/docs/guides/configure#resources
resources:
  store:
    # Subresources define resources that are nested within another for more powerful
    # logical groupings, e.g. `cards.payments`.
    subresources:
      orders:
        # Configure the methods defined in this resource. Each key in the object is the
        # name of the method and the value is either an endpoint (for example, `get /foo`)
        # or an object with more detail.
        #
        # [reference]: https://app.stainlessapi.com/docs/reference/config#method
        # Configure the models--named types--defined in the resource. Each key in the
        # object is the name of the model and the value is either the name of a schema in
        # `#/components/schemas` or an object with more detail.
        #
        # [reference]: https://app.stainlessapi.com/docs/reference/config#model
        models:
          cool_order: Order
        methods:
          retrieve: get /store/order/{orderId}
          delete: delete /store/order/{orderId}

  users:
    models:
      user: User
    methods:
      create: post /user
      create_with_list: post /user/createWithList
      login: get /user/login
      logout: get /user/logout
      retrieve: get /user/{username}
      update: put /user/{username}
      delete: delete /user/{username}

settings:
  license: Apache-2.0

# `readme` is used to configure the code snippets that will be rendered in the
# README.md of various SDKs. In particular, you can change the `headline`
# snippet's endpoint and the arguments to call it with.
readme:
  example_requests:
    default:
      type: request
      endpoint: post /user
      params: &ref_0 {}
    headline:
      type: request
      endpoint: post /user
      params: *ref_0

unspecified_endpoints:
  - put /pet
  - post /pet
  - get /pet/findByStatus
  - get /pet/findByTags
  - get /pet/{petId}
  - post /pet/{petId}
  - delete /pet/{petId}
  - post /pet/{petId}/uploadImage
  - get /store/inventory
  - post /store/order
